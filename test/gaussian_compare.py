# Comparing our gaussian code with AMP

import numpy as np

from ase.calculators.emt import EMT
from ase.build import fcc110
from ase import Atoms, Atom
from ase.md.velocitydistribution import MaxwellBoltzmannDistribution
from ase import units
from ase.md import VelocityVerlet
from ase.constraints import FixAtoms

from pymatgen.core.structure import Structure
from pymatgen.io.ase import AseAtomsAdaptor

import sys
sys.path.append("..")

from descriptors.gaussian import Gaussian as SyF


def generate_data(count):
    """Generates test or training data with a simple MD simulation."""
    atoms = fcc110('Pt', (2, 2, 2), vacuum=7.)
    adsorbate = Atoms([Atom('Cu', atoms[7].position + (0., 0., 2.5)),
                       Atom('Cu', atoms[7].position + (0., 0., 5.))])
    atoms.extend(adsorbate)
    atoms.set_constraint(FixAtoms(indices=[0, 2]))
    MaxwellBoltzmannDistribution(atoms, 300. * units.kB)
    dyn = VelocityVerlet(atoms, dt=1. * units.fs)
    atoms.set_calculator(EMT())
    newatoms = atoms.copy()
    newatoms.set_calculator(EMT())
    newatoms.get_potential_energy()
    images = [newatoms]
    for step in range(count - 1):
        dyn.run(50)
        newatoms = atoms.copy()
        newatoms.set_calculator(EMT())
        newatoms.get_potential_energy()
        images.append(newatoms)
    return images

prec = 11

amp_fp = np.asarray([[5.684992851444012, 0.2106192000039041, 5.390166558890312, 0.19175430208750674, 4.256043075034483, 0.12440779985226418, 1.6822001930225576, 0.01734595164908539, 6.525548497292827, 0.4408811214877819, 0.0002099520712639313, 0.9431810897806951, 0.020754124185031367, 5.606413142081242e-06, 6.496893805288129, 0.45255654355912356, 0.00018046244290439092, 0.678225933526815, 0.005497316969136179, 7.874703926220427e-07, 14.897031130302432, 1.4977389975506987, 0.004004720989069582, 15.592452413569537, 0.9860918386121642, 0.0014093022149791565, 5.9514044420777035, 0.5608013882396756, 0.0016207973482240433, 6.669318479465798, 0.17359602829672818, 2.4857428543848153e-05],[5.684992851444012, 0.2106192000039041, 5.390166558890311, 0.19175430208750674, 4.256043075034483, 0.12440779985226418, 1.682200193022558, 0.01734595164908539, 6.525548497292824, 0.4408811214877819, 0.0002099520712639313, 0.943181089780695, 0.020754124185031367, 5.606413142081242e-06, 6.496893805288129, 0.45255654355912356, 0.00018046244290439092, 0.6782259335268146, 0.005497316969136179, 7.874703926220427e-07, 14.897031130302427, 1.4977389975506987, 0.004004720989069582, 15.59245241356953, 0.986091838612164, 0.0014093022149791565, 5.951404442077705, 0.5608013882396757, 0.0016207973482240433, 6.6693184794657965, 0.17359602829672816, 2.4857428543848153e-05],[5.6849928514440125, 0.2106192000039041, 5.390166558890312, 0.19175430208750674, 4.2560430750344835, 0.12440779985226418, 1.6822001930225579, 0.01734595164908539, 6.525548497292826, 0.44088112148778197, 0.00020995207126393086, 0.9431810897806953, 0.020754124185031357, 5.60641314208123e-06, 6.496893805288128, 0.45255654355912356, 0.00018046244290439054, 0.6782259335268148, 0.005497316969136176, 7.87470392622041e-07, 14.89703113030243, 1.4977389975506987, 0.004004720989069582, 15.59245241356954, 0.9860918386121641, 0.0014093022149791565, 5.9514044420777035, 0.5608013882396756, 0.0016207973482240433, 6.669318479465798, 0.17359602829672818, 2.4857428543848153e-05],[5.684992851444012, 0.2106192000039041, 5.390166558890311, 0.19175430208750674, 4.256043075034483, 0.12440779985226418, 1.6822001930225576, 0.01734595164908539, 6.525548497292826, 0.4408811214877819, 0.00020995207126393086, 0.9431810897806951, 0.020754124185031357, 5.60641314208123e-06, 6.496893805288128, 0.4525565435591236, 0.00018046244290439054, 0.6782259335268144, 0.005497316969136178, 7.87470392622041e-07, 14.89703113030242, 1.4977389975506985, 0.004004720989069582, 15.592452413569527, 0.986091838612164, 0.0014093022149791565, 5.951404442077704, 0.5608013882396757, 0.0016207973482240433, 6.669318479465798, 0.17359602829672818, 2.4857428543848153e-05],[5.684992851444012, 0.260573858333391, 5.390166558890312, 0.22966405101881365, 4.256043075034482, 0.12780810507947324, 1.682200193022558, 0.008416147189561756, 6.525548497292826, 0.2777028899171274, 0.0006960153934245413, 0.9431810897806951, 0.0043317902149642325, 1.9487659523558526e-05, 6.49689380528813, 0.2815371575857184, 0.0005962462822133394, 0.6782259335268146, 0.0004079747020718698, 2.7934245256929586e-06, 14.897031130302425, 1.3729485601782185, 0.025776141283533824, 15.592452413569532, 1.7246085171594072, 0.02842753261413703, 5.951404442077708, 0.4877856482654594, 0.006314355037170915, 6.669318479465797, 0.8423519507057663, 0.008372503403613302],[5.6849928514440125, 0.8243158479011873, 5.3901665588903125, 0.7712983122426443, 4.2560430750344835, 0.5696899152382175, 1.682200193022558, 0.14929026171055762, 6.525548497292825, 1.0111140246169625, 0.05680821883325213, 0.9431810897806949, 0.14838196520327962, 0.006813721791489433, 6.496893805288131, 0.9712450172290861, 0.06636377895069026, 0.6782259335268148, 0.08893931621110211, 0.00265139876698584, 14.89703113030242, 4.012715080222742, 0.21983535700118778, 15.592452413569521, 5.643283321169611, 0.18542547033637563, 5.951404442077708, 1.1112661761914369, 0.06888960334925082, 6.669318479465798, 2.4137415238401485, 0.028458364157055736],[5.6849928514440125, 0.3670045986144035, 5.390166558890312, 0.33419051273280376, 4.256043075034483, 0.21646548578019642, 1.6822001930225579, 0.028991313929706674, 6.525548497292828, 0.43688817220783926, 0.0009217472040756284, 0.9431810897806949, 0.03091747414633765, 2.722405217032798e-05, 6.4968938052881295, 0.43319651023864547, 0.0011130307599149162, 0.6782259335268148, 0.010527477076769272, -5.649611390703332e-06, 14.897031130302429, 1.8769922598141546, 0.021451731046897397, 15.592452413569534, 2.4507667976515677, 0.05001758274502427, 5.951404442077708, 0.5803710645262371, 0.00135552525586491, 6.669318479465799, 1.1654015577639025, 0.01785855578730768],[5.6849928514440125, 0.8139181843767319, 5.390166558890311, 0.7807053382256871, 4.256043075034483, 0.6519559354010992, 1.682200193022558, 0.33004677211841793, 6.525548497292827, 0.2509278611636663, 0.18075917191083823, 0.9431810897806947, 0.7421619360619491, 0.007246214633023882, 6.496893805288131, 0.13355604881106062, 0.2255177562495158, 0.678225933526815, 0.565377954728904, -0.001787305671967103, 14.897031130302423, 3.5906332708463196, 0.19273307408307255, 15.592452413569527, 5.886234961289778, 0.009767230981054005, 5.951404442077709, 0.3407825176467502, 0.17778113420576214, 6.669318479465801, 1.7570052997573673, 0.0003433609133317719],[2.9157330669115304, 0.7930148160406122, 2.7121151409412696, 0.7597201780982163, 1.9654199684210791, 0.6334054295082175, 0.5781025869314682, 0.3262842633342541, 3.051010092481083, 0.04774237056057067, 0.0033236703212138835, 0.044925796763292704, 0.21782396604716373, 0.00046221750063521786, 3.243533588973638, 0.04051761584513386, 0.0033339696366393133, 0.0027900008232286046, 0.26235970889371907, 0.0001814976265062803, 5.92597227290906, 0.840746392583345, 0.09231177681614354, 1.8834724004618897, 3.919273354291709, 0.08660979423201519, 3.2152949637574055, 0.10126927294846974, 0.01743000976275685, 0.14799546011447207, 2.670102954893396, 0.016386111070402568],[0.19255622232979935, 0.7930148160406122, 0.17076028162870607, 0.7597201780982163, 0.09813067248696411, 0.6334054295082175, 0.008025714613117277, 0.3262842633342541, 0.014964321763133422, 0.23048933422973855, 0.0033236703212138827, 0.00026789349998252343, 0.008101732051802453, 0.0004622175006352177, 0.017245999688195297, 0.28318784700789285, 0.0033339696366393133, -4.130554316155327e-05, -0.001937076051745713, 0.00018149762650628029, 0.019327779632343667, 0.2885127992899317, 0.09231177681614354, 0.001815254519202966, 0.02953216496250625, 0.08660979423201519, 0.015072184887919974, 0.25174054849201, 0.01743000976275685, 8.216122430491681e-06, 0.004107094921188561, 0.016386111070402568]])


for i in range(len(amp_fp)):
    for j in range(len(amp_fp[i])):
        amp_fp[i][j] = np.format_float_scientific(amp_fp[i][j], precision=prec)


# Our code

train_struc = AseAtomsAdaptor.get_structure(generate_data(1)[0])

sym_params = {'G4': {'eta': [0.005],
                     'zeta': [1., 4],
                     'lamBda': [1., -1.]}}

sym_params = {'G2': {'eta': np.logspace(np.log10(0.05),
                                         np.log10(5.), num=4)},
                'G4': {'eta': [0.003],
                        'zeta':[2., 3.],
                        'lamBda':[+1.5, -1.5]},
                'G5': {'eta': [0.005],
                        'zeta': [1., 4.],
                        'lamBda': [1., -1.]}}

gauss = SyF(train_struc, sym_params)
our_fp = gauss.G

for i in range(len(our_fp)):
    for j in range(len(our_fp[i])):
        our_fp[i][j] = np.format_float_scientific(our_fp[i][j], precision=prec)

print((amp_fp==our_fp).all())
